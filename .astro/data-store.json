[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.8","content-config-digest","e7304cbed3c9019b","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"never\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[\"cdn.pixabay.com\"],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null],\"rehypePlugins\":[null,null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false},\"site\":\"https://gregoryleroux.com\"}","post",["Map",11,12,57,58,90,91,130,131],"metafields-vs-metaobject",{"id":11,"data":13,"body":28,"filePath":29,"digest":30,"rendered":31},{"publishDate":14,"title":15,"excerpt":16,"image":17,"category":18,"tags":19,"author":25,"metadata":26},["Date","2025-02-02T00:00:00.000Z"],"Metafields VS Metaobjects : c'est quoi la différence ?","Comprenez la différence entre les Metafields et les Metaobjects et comment les utiliser efficacement sur votre boutique Shopify.","~/assets/images/metafields-vs-metaobjects.png","Shopify",[20,21,22,23,24],"shopify","ecommerce","liquid","metafields","metaobjects","Gregory Leroux",{"canonical":27},"https://gregoryleroux.com/metafields-vs-metaobjects-shopify","## Les Metafields\n\nLes Metafields sont parfaits pour enrichir des objets existants comme les produits, les clients, les commandes, etc. Ils s'ajoutent directement aux objets Shopify et ne nécessitent pas de coder. Avec l'éditeur de thème, vous pouvez lier un Metafield à une section ou un bloc en quelques clics.\n\n### Exemple d'utilisation des Metafields\n\nPrenons une boutique de vêtements vendant des t-shirts. Sur la page produit, aucun champ n'est prévu pour afficher la composition du tissu. Avec les Metafields, vous pouvez créer un champ personnalisé \"Composition\", qui sera ensuite affiché sur la page produit sans modification du code Liquid.\n\n## Les Metaobjects\n\nLes Metaobjects, en revanche, permettent de créer vos propres types d'objets avec des champs personnalisés (ex: nom, image, URL, description, etc.). Ils doivent être intégrés au thème avec du code Liquid pour s'afficher sur la boutique.\n\n### Exemple d'utilisation des Metaobjects\n\nImaginons que chaque t-shirt de votre boutique soit illustré par un artiste différent. Vous pouvez créer un Metaobject \"Artiste\", avec des champs tels que :\n\n- Nom\n- Photo\n- Biographie\n- Produits associés\n- Site web\n\nEnsuite, vous pouvez afficher ces données dynamiquement en adaptant votre thème Shopify via Liquid.\n\n## En résumé\n\n| Caractéristique        | Metafields                                          | Metaobjects                                           |\n| ---------------------- | --------------------------------------------------- | ----------------------------------------------------- |\n| Usage                  | Ajouter des champs à des objets existants           | Créer de nouveaux objets personnalisés                |\n| Facilité d'utilisation | Accessible via l'interface Shopify                  | Nécessite du code Liquid                              |\n| Exemple                | Ajouter un champ \"Composition\" sur une page produit | Créer un objet \"Artiste\" associé à plusieurs produits |\n\nLes Metafields sont idéaux pour ajouter des informations simples et rapides sur des objets Shopify existants, tandis que les Metaobjects sont plus adaptés à des besoins complexes et structurés.","src/data/post/metafields-vs-metaobject.md","09de502e9a4d5edc",{"html":32,"metadata":33},"\u003Ch2 id=\"les-metafields\">Les Metafields\u003C/h2>\n\u003Cp>Les Metafields sont parfaits pour enrichir des objets existants comme les produits, les clients, les commandes, etc. Ils s’ajoutent directement aux objets Shopify et ne nécessitent pas de coder. Avec l’éditeur de thème, vous pouvez lier un Metafield à une section ou un bloc en quelques clics.\u003C/p>\n\u003Ch3 id=\"exemple-dutilisation-des-metafields\">Exemple d’utilisation des Metafields\u003C/h3>\n\u003Cp>Prenons une boutique de vêtements vendant des t-shirts. Sur la page produit, aucun champ n’est prévu pour afficher la composition du tissu. Avec les Metafields, vous pouvez créer un champ personnalisé “Composition”, qui sera ensuite affiché sur la page produit sans modification du code Liquid.\u003C/p>\n\u003Ch2 id=\"les-metaobjects\">Les Metaobjects\u003C/h2>\n\u003Cp>Les Metaobjects, en revanche, permettent de créer vos propres types d’objets avec des champs personnalisés (ex: nom, image, URL, description, etc.). Ils doivent être intégrés au thème avec du code Liquid pour s’afficher sur la boutique.\u003C/p>\n\u003Ch3 id=\"exemple-dutilisation-des-metaobjects\">Exemple d’utilisation des Metaobjects\u003C/h3>\n\u003Cp>Imaginons que chaque t-shirt de votre boutique soit illustré par un artiste différent. Vous pouvez créer un Metaobject “Artiste”, avec des champs tels que :\u003C/p>\n\u003Cul>\n\u003Cli>Nom\u003C/li>\n\u003Cli>Photo\u003C/li>\n\u003Cli>Biographie\u003C/li>\n\u003Cli>Produits associés\u003C/li>\n\u003Cli>Site web\u003C/li>\n\u003C/ul>\n\u003Cp>Ensuite, vous pouvez afficher ces données dynamiquement en adaptant votre thème Shopify via Liquid.\u003C/p>\n\u003Ch2 id=\"en-résumé\">En résumé\u003C/h2>\n\u003Cdiv style=\"overflow:auto\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Caractéristique\u003C/th>\u003Cth>Metafields\u003C/th>\u003Cth>Metaobjects\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Usage\u003C/td>\u003Ctd>Ajouter des champs à des objets existants\u003C/td>\u003Ctd>Créer de nouveaux objets personnalisés\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Facilité d’utilisation\u003C/td>\u003Ctd>Accessible via l’interface Shopify\u003C/td>\u003Ctd>Nécessite du code Liquid\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Exemple\u003C/td>\u003Ctd>Ajouter un champ “Composition” sur une page produit\u003C/td>\u003Ctd>Créer un objet “Artiste” associé à plusieurs produits\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\u003C/div>\n\u003Cp>Les Metafields sont idéaux pour ajouter des informations simples et rapides sur des objets Shopify existants, tandis que les Metaobjects sont plus adaptés à des besoins complexes et structurés.\u003C/p>",{"headings":34,"imagePaths":52,"frontmatter":53},[35,39,43,46,49],{"depth":36,"slug":37,"text":38},2,"les-metafields","Les Metafields",{"depth":40,"slug":41,"text":42},3,"exemple-dutilisation-des-metafields","Exemple d’utilisation des Metafields",{"depth":36,"slug":44,"text":45},"les-metaobjects","Les Metaobjects",{"depth":40,"slug":47,"text":48},"exemple-dutilisation-des-metaobjects","Exemple d’utilisation des Metaobjects",{"depth":36,"slug":50,"text":51},"en-résumé","En résumé",[],{"publishDate":54,"author":25,"title":15,"excerpt":16,"image":17,"category":18,"tags":55,"metadata":56,"readingTime":36},["Date","2025-02-02T00:00:00.000Z"],[20,21,22,23,24],{"canonical":27},"shopify-love-story",{"id":57,"data":59,"body":69,"filePath":70,"digest":71,"rendered":72},{"publishDate":60,"title":61,"excerpt":62,"image":63,"category":18,"tags":64,"author":25,"metadata":68},["Date","2025-02-01T00:00:00.000Z"],"Shopify a love story","Pourquoi je suis devenu fan et pourquoi vous devriez vous aussi vous y intéressez ?","~/assets/images/shopify-lover.png",[20,21,65,66,67],"API","webhooks","prestashop",{"canonical":27},"Après plus de 3 ans à développé des solutions e-commerce pour diverses entreprises, principalement avec Prestashop, j'y avais mes repères. Pour moi, il n'y avait aucune raison d'utiliser une autre plateforme.\n\nPuis, un jour, on me propose une nouvelle mission e-commerce sur Shopify. À ce moment là, pour moi, Shopify, c'était une plateforme qui permettait à n'importe qui de créer rapidement une boutique e-commerce, notamment pour la vente de produits en dropshipping. Je ne voyais pas en quoi cela pouvait révolutionner mon travail en tant que développeur. J'étais loin de m'imaginer tout ce que j'allais découvrir avec cette nouvelle solution.\n\n## Premier jour, première surprise\n\nComme à mon habitude (avec Prestashop), je demande le repository du projet ainsi qu'une copie de la base de données pour travailler en local. Mon collègue me regarde, amusé :\n\n> \"Euh... non on n'a pas d'accès à la code base et tu n'auras pas directement accès à la base de données de la boutique Shopify.\"\n\nQuoi ?! Pas d'accès au code ?!\n\nJe commence à paniquer :\n\n> \"Mais comment tu fais pour développer des fonctionnalités alors ?!\"\n\n## Les API et les webhooks\n\nMon collègue m'explique que tout passe par les **API** et **webhooks** de Shopify.\n\nMais ce qui m'a vraiment bluffé, c'est leur approche : Shopify ne vous donne pas accès à leur code base ni à leur base de données, mais ils vous offrent une **flexibilité totale** grâce aux **develop apps**.\n\nConcrètement, vous pouvez développer vos propres applications en les connectant à Shopify via les clés et les secrets API de votre develop app. Le gros avantage ? Vous êtes libres de coder dans **le langage de votre choix**, sans framework imposé !\n\nEt ce n'est pas tout : **Shopify s'occupe de l'hébergement du site e-commerce pour vous**. Bien sûr, il vous restera à gérer l'hébergement de vos develops apps, mais vous et vos clients avez la tranquillité d'esprit de savoir que votre e-commerce repose sur une infrastructure fiable et solide !\n\n## En quelques jours, j'ai compris pourquoi Shopify est si spécial\n\n- **Une solution clé en main** pour vos clients reposant sur un large eco systeme d'applications\n- **Un système stable**, la code base n'est pas modifiable et gere par Shopify\n- **Des API et des webhooks puissants**, super bien documentés\n- **Une flexibilité totale**, avec des apps sur mesure dans le langage de votre choix\n\nFinalement, Shopify m'a fait repenser le développement e-commerce : c'est une plateforme à la fois robuste, simple, et incroyablement flexible. Ce qui rend le travail très agréable pour les développeurs !","src/data/post/shopify-love-story.md","5e8f81c50ceb15ea",{"html":73,"metadata":74},"\u003Cp>Après plus de 3 ans à développé des solutions e-commerce pour diverses entreprises, principalement avec Prestashop, j’y avais mes repères. Pour moi, il n’y avait aucune raison d’utiliser une autre plateforme.\u003C/p>\n\u003Cp>Puis, un jour, on me propose une nouvelle mission e-commerce sur Shopify. À ce moment là, pour moi, Shopify, c’était une plateforme qui permettait à n’importe qui de créer rapidement une boutique e-commerce, notamment pour la vente de produits en dropshipping. Je ne voyais pas en quoi cela pouvait révolutionner mon travail en tant que développeur. J’étais loin de m’imaginer tout ce que j’allais découvrir avec cette nouvelle solution.\u003C/p>\n\u003Ch2 id=\"premier-jour-première-surprise\">Premier jour, première surprise\u003C/h2>\n\u003Cp>Comme à mon habitude (avec Prestashop), je demande le repository du projet ainsi qu’une copie de la base de données pour travailler en local. Mon collègue me regarde, amusé :\u003C/p>\n\u003Cblockquote>\n\u003Cp>“Euh… non on n’a pas d’accès à la code base et tu n’auras pas directement accès à la base de données de la boutique Shopify.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>Quoi ?! Pas d’accès au code ?!\u003C/p>\n\u003Cp>Je commence à paniquer :\u003C/p>\n\u003Cblockquote>\n\u003Cp>“Mais comment tu fais pour développer des fonctionnalités alors ?!”\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"les-api-et-les-webhooks\">Les API et les webhooks\u003C/h2>\n\u003Cp>Mon collègue m’explique que tout passe par les \u003Cstrong>API\u003C/strong> et \u003Cstrong>webhooks\u003C/strong> de Shopify.\u003C/p>\n\u003Cp>Mais ce qui m’a vraiment bluffé, c’est leur approche : Shopify ne vous donne pas accès à leur code base ni à leur base de données, mais ils vous offrent une \u003Cstrong>flexibilité totale\u003C/strong> grâce aux \u003Cstrong>develop apps\u003C/strong>.\u003C/p>\n\u003Cp>Concrètement, vous pouvez développer vos propres applications en les connectant à Shopify via les clés et les secrets API de votre develop app. Le gros avantage ? Vous êtes libres de coder dans \u003Cstrong>le langage de votre choix\u003C/strong>, sans framework imposé !\u003C/p>\n\u003Cp>Et ce n’est pas tout : \u003Cstrong>Shopify s’occupe de l’hébergement du site e-commerce pour vous\u003C/strong>. Bien sûr, il vous restera à gérer l’hébergement de vos develops apps, mais vous et vos clients avez la tranquillité d’esprit de savoir que votre e-commerce repose sur une infrastructure fiable et solide !\u003C/p>\n\u003Ch2 id=\"en-quelques-jours-jai-compris-pourquoi-shopify-est-si-spécial\">En quelques jours, j’ai compris pourquoi Shopify est si spécial\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Une solution clé en main\u003C/strong> pour vos clients reposant sur un large eco systeme d’applications\u003C/li>\n\u003Cli>\u003Cstrong>Un système stable\u003C/strong>, la code base n’est pas modifiable et gere par Shopify\u003C/li>\n\u003Cli>\u003Cstrong>Des API et des webhooks puissants\u003C/strong>, super bien documentés\u003C/li>\n\u003Cli>\u003Cstrong>Une flexibilité totale\u003C/strong>, avec des apps sur mesure dans le langage de votre choix\u003C/li>\n\u003C/ul>\n\u003Cp>Finalement, Shopify m’a fait repenser le développement e-commerce : c’est une plateforme à la fois robuste, simple, et incroyablement flexible. Ce qui rend le travail très agréable pour les développeurs !\u003C/p>",{"headings":75,"imagePaths":85,"frontmatter":86},[76,79,82],{"depth":36,"slug":77,"text":78},"premier-jour-première-surprise","Premier jour, première surprise",{"depth":36,"slug":80,"text":81},"les-api-et-les-webhooks","Les API et les webhooks",{"depth":36,"slug":83,"text":84},"en-quelques-jours-jai-compris-pourquoi-shopify-est-si-spécial","En quelques jours, j’ai compris pourquoi Shopify est si spécial",[],{"publishDate":87,"author":25,"title":61,"excerpt":62,"image":63,"category":18,"tags":88,"metadata":89,"readingTime":40},["Date","2025-02-01T00:00:00.000Z"],[20,21,65,66,67],{"canonical":27},"les-collections-shopify",{"id":90,"data":92,"body":103,"filePath":104,"digest":105,"rendered":106},{"publishDate":93,"title":94,"excerpt":95,"image":96,"category":18,"tags":97,"author":25,"metadata":101},["Date","2025-02-04T00:00:00.000Z"],"Les collections Shopify : comment bien organiser vos produits ?","Découvrez comment utiliser efficacement les collections Shopify pour organiser vos produits et améliorer l'expérience de vos clients.","~/assets/images/les-collections.png",[20,21,98,99,100],"collections","organisation","produits",{"canonical":102},"https://gregoryleroux.com/les-collections-shopify","## À quoi servent les collections Shopify ?\n\nLes collections sont là pour vous aider à organiser vos produits, mais pas seulement. Elles sont aussi là pour aider vos clients à trouver ce qu’ils cherchent et améliorer l’expérience d’achat !\n\n## Les types de collections\n\nShopify propose **deux types de collections** :\n\n### Les collections manuelles\n\nLes collections manuelles sont intéressantes pour la **création de petites collections** de produits ou si vous voulez **créer des collections spéciales** que vous préférez gérer manuellement.\n\nUne collection manuelle est aussi utile si vous avez une **vente flash** : vous pouvez ainsi ajouter quelques produits et y appliquer une réduction par exemple.\n\n### Les collections automatiques\n\nLes collections automatiques utilisent des **conditions** pour **intégrer automatiquement des produits** qui correspondent aux critères définis.\n\nVous pouvez ajouter une ou plusieurs conditions sur une collection automatique. Les conditions peuvent être basées sur :\n\n- Le titre du produit\n- Le type de produit\n- Les tags\n- Le prix\n- Le stock restant\n\nQuand vous créez un produit qui correspond aux conditions d’une collection, il sera **automatiquement ajouté** à cette collection !\n\n### Exemple concret\n\nVous avez une boutique de yoga et vos clients ont une sensibilité pour les produits éco-responsables. Vous pouvez alors :\n\n- Créer une collection automatique avec les produits qui ont le tag \"bio\" ou \"recycle\".\n- Ajouter du contenu personnalisé sur cette page collection, par exemple, un texte qui parle de votre engagement écologique.\n\nAinsi, vos **clients trouvent rapidement les produits alignés avec leurs valeurs**, ce qui va **booster vos ventes** !","src/data/post/les-collections-shopify.md","2e63eab202cfabac",{"html":107,"metadata":108},"\u003Ch2 id=\"à-quoi-servent-les-collections-shopify\">À quoi servent les collections Shopify ?\u003C/h2>\n\u003Cp>Les collections sont là pour vous aider à organiser vos produits, mais pas seulement. Elles sont aussi là pour aider vos clients à trouver ce qu’ils cherchent et améliorer l’expérience d’achat !\u003C/p>\n\u003Ch2 id=\"les-types-de-collections\">Les types de collections\u003C/h2>\n\u003Cp>Shopify propose \u003Cstrong>deux types de collections\u003C/strong> :\u003C/p>\n\u003Ch3 id=\"les-collections-manuelles\">Les collections manuelles\u003C/h3>\n\u003Cp>Les collections manuelles sont intéressantes pour la \u003Cstrong>création de petites collections\u003C/strong> de produits ou si vous voulez \u003Cstrong>créer des collections spéciales\u003C/strong> que vous préférez gérer manuellement.\u003C/p>\n\u003Cp>Une collection manuelle est aussi utile si vous avez une \u003Cstrong>vente flash\u003C/strong> : vous pouvez ainsi ajouter quelques produits et y appliquer une réduction par exemple.\u003C/p>\n\u003Ch3 id=\"les-collections-automatiques\">Les collections automatiques\u003C/h3>\n\u003Cp>Les collections automatiques utilisent des \u003Cstrong>conditions\u003C/strong> pour \u003Cstrong>intégrer automatiquement des produits\u003C/strong> qui correspondent aux critères définis.\u003C/p>\n\u003Cp>Vous pouvez ajouter une ou plusieurs conditions sur une collection automatique. Les conditions peuvent être basées sur :\u003C/p>\n\u003Cul>\n\u003Cli>Le titre du produit\u003C/li>\n\u003Cli>Le type de produit\u003C/li>\n\u003Cli>Les tags\u003C/li>\n\u003Cli>Le prix\u003C/li>\n\u003Cli>Le stock restant\u003C/li>\n\u003C/ul>\n\u003Cp>Quand vous créez un produit qui correspond aux conditions d’une collection, il sera \u003Cstrong>automatiquement ajouté\u003C/strong> à cette collection !\u003C/p>\n\u003Ch3 id=\"exemple-concret\">Exemple concret\u003C/h3>\n\u003Cp>Vous avez une boutique de yoga et vos clients ont une sensibilité pour les produits éco-responsables. Vous pouvez alors :\u003C/p>\n\u003Cul>\n\u003Cli>Créer une collection automatique avec les produits qui ont le tag “bio” ou “recycle”.\u003C/li>\n\u003Cli>Ajouter du contenu personnalisé sur cette page collection, par exemple, un texte qui parle de votre engagement écologique.\u003C/li>\n\u003C/ul>\n\u003Cp>Ainsi, vos \u003Cstrong>clients trouvent rapidement les produits alignés avec leurs valeurs\u003C/strong>, ce qui va \u003Cstrong>booster vos ventes\u003C/strong> !\u003C/p>",{"headings":109,"imagePaths":125,"frontmatter":126},[110,113,116,119,122],{"depth":36,"slug":111,"text":112},"à-quoi-servent-les-collections-shopify","À quoi servent les collections Shopify ?",{"depth":36,"slug":114,"text":115},"les-types-de-collections","Les types de collections",{"depth":40,"slug":117,"text":118},"les-collections-manuelles","Les collections manuelles",{"depth":40,"slug":120,"text":121},"les-collections-automatiques","Les collections automatiques",{"depth":40,"slug":123,"text":124},"exemple-concret","Exemple concret",[],{"publishDate":127,"author":25,"title":94,"excerpt":95,"image":96,"category":18,"tags":128,"metadata":129,"readingTime":36},["Date","2025-02-04T00:00:00.000Z"],[20,21,98,99,100],{"canonical":102},"shopify-api",{"id":130,"data":132,"body":144,"filePath":145,"digest":146,"rendered":147},{"publishDate":133,"title":134,"excerpt":135,"image":136,"category":18,"tags":137,"author":25,"metadata":142},["Date","2025-02-03T00:00:00.000Z"],"Les API Shopify : le guide complet pour les développeurs","Découvrez comment utiliser les API Shopify pour créer des applications personnalisées et automatiser votre boutique en ligne.","~/assets/images/shopify-api.png",[20,138,139,140,141],"api","developpement","rest","graphql",{"canonical":143},"https://gregoryleroux.com/shopify-api","Les API Shopify sont la clé pour étendre les fonctionnalités de votre boutique en ligne. Que vous souhaitiez créer une application personnalisée ou automatiser certaines tâches, les API Shopify vous offrent toute la flexibilité nécessaire.\n\n## C'est quoi une API ?\n\nPour moi, une API est un moyen d’exposer ta base de données via une adresse que l’on appelle **endpoint**. L’API sert de pont entre l’utilisateur et la base de données.\n\nQuand vous développez votre API, vous choisissez :\n\n- Les **adresses (endpoints)** auxquelles vous exposez vos données.\n- Ce qu’on peut en faire (**les lire, les modifier et/ou les supprimer**).\n\n## Exemple avec un restaurant\n\nPour les moins techniques d’entre vous, reprenons l’exemple souvent utilisé pour expliquer les API, celui du restaurant :\n\n### Imagine que tu es dans un restaurant :\n\n- **L’API, c’est le serveur** → Il prend ta commande, va en cuisine et te ramène ce que tu as demandé.\n- **La base de données, c’est la cuisine** → Tu n’as pas accès aux fourneaux, mais tu peux commander des plats (**données**).\n- **L’endpoint, c’est une partie du menu** → `GET /menu/plats` ou `GET /menu/boissons`\n\nLe **serveur** sert d’**intermédiaire** entre toi et la cuisine, comme l’API sert d’intermédiaire entre toi et la base de données.\n\nTu n’as pas à te préoccuper de **comment fonctionne la cuisine**, c’est le restaurant qui s’en occupe.  \nC’est pareil pour la base de données : **Shopify te donne la documentation (le menu)** et l’API permet de récupérer les données qui t’intéressent.\n\n## Les différents types d'API Shopify\n\nShopify propose plusieurs API adaptées à différents besoins :\n\n### **1. Admin API**\n\nPour gérer la **partie back-end** de votre boutique.  \n**Exemples** :\n\n- Ajouter un produit.\n- Créer une commande.\n- Modifier les stocks.\n\n### **2. Storefront API**\n\nPour gérer la **partie front-end** de votre boutique.  \n**Exemples** :\n\n- Créer un site headless avec une interface totalement sur mesure.\n- Afficher les produits et collections dynamiquement.\n\n### **3. API GraphQL ou REST**\n\nShopify propose les **deux**, mais ils tendent à privilégier les API **GraphQL**.  \nOn verra les différences dans un prochain post ! 😉\n\n## En résumé\n\nShopify vous donne accès aux données que vous pouvez **lire, modifier et utiliser** via leur API.\n\nCela permet aux développeurs d’**étendre les fonctionnalités** d’une boutique Shopify :\n\n- **Back-end** via les **Admin API**\n- **Front-end** via les **Storefront API**\n\nEn choisissant les données qu’ils exposent, Shopify garantit la **stabilité** de la solution. Ainsi, les développeurs ne peuvent **pas modifier ou supprimer une donnée essentielle** au bon fonctionnement de la boutique.","src/data/post/shopify-api.md","11f8bc03e92ff7af",{"html":148,"metadata":149},"\u003Cp>Les API Shopify sont la clé pour étendre les fonctionnalités de votre boutique en ligne. Que vous souhaitiez créer une application personnalisée ou automatiser certaines tâches, les API Shopify vous offrent toute la flexibilité nécessaire.\u003C/p>\n\u003Ch2 id=\"cest-quoi-une-api\">C’est quoi une API ?\u003C/h2>\n\u003Cp>Pour moi, une API est un moyen d’exposer ta base de données via une adresse que l’on appelle \u003Cstrong>endpoint\u003C/strong>. L’API sert de pont entre l’utilisateur et la base de données.\u003C/p>\n\u003Cp>Quand vous développez votre API, vous choisissez :\u003C/p>\n\u003Cul>\n\u003Cli>Les \u003Cstrong>adresses (endpoints)\u003C/strong> auxquelles vous exposez vos données.\u003C/li>\n\u003Cli>Ce qu’on peut en faire (\u003Cstrong>les lire, les modifier et/ou les supprimer\u003C/strong>).\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"exemple-avec-un-restaurant\">Exemple avec un restaurant\u003C/h2>\n\u003Cp>Pour les moins techniques d’entre vous, reprenons l’exemple souvent utilisé pour expliquer les API, celui du restaurant :\u003C/p>\n\u003Ch3 id=\"imagine-que-tu-es-dans-un-restaurant\">Imagine que tu es dans un restaurant :\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>L’API, c’est le serveur\u003C/strong> → Il prend ta commande, va en cuisine et te ramène ce que tu as demandé.\u003C/li>\n\u003Cli>\u003Cstrong>La base de données, c’est la cuisine\u003C/strong> → Tu n’as pas accès aux fourneaux, mais tu peux commander des plats (\u003Cstrong>données\u003C/strong>).\u003C/li>\n\u003Cli>\u003Cstrong>L’endpoint, c’est une partie du menu\u003C/strong> → \u003Ccode>GET /menu/plats\u003C/code> ou \u003Ccode>GET /menu/boissons\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>Le \u003Cstrong>serveur\u003C/strong> sert d’\u003Cstrong>intermédiaire\u003C/strong> entre toi et la cuisine, comme l’API sert d’intermédiaire entre toi et la base de données.\u003C/p>\n\u003Cp>Tu n’as pas à te préoccuper de \u003Cstrong>comment fonctionne la cuisine\u003C/strong>, c’est le restaurant qui s’en occupe.\u003Cbr>\nC’est pareil pour la base de données : \u003Cstrong>Shopify te donne la documentation (le menu)\u003C/strong> et l’API permet de récupérer les données qui t’intéressent.\u003C/p>\n\u003Ch2 id=\"les-différents-types-dapi-shopify\">Les différents types d’API Shopify\u003C/h2>\n\u003Cp>Shopify propose plusieurs API adaptées à différents besoins :\u003C/p>\n\u003Ch3 id=\"1-admin-api\">\u003Cstrong>1. Admin API\u003C/strong>\u003C/h3>\n\u003Cp>Pour gérer la \u003Cstrong>partie back-end\u003C/strong> de votre boutique.\u003Cbr>\n\u003Cstrong>Exemples\u003C/strong> :\u003C/p>\n\u003Cul>\n\u003Cli>Ajouter un produit.\u003C/li>\n\u003Cli>Créer une commande.\u003C/li>\n\u003Cli>Modifier les stocks.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2-storefront-api\">\u003Cstrong>2. Storefront API\u003C/strong>\u003C/h3>\n\u003Cp>Pour gérer la \u003Cstrong>partie front-end\u003C/strong> de votre boutique.\u003Cbr>\n\u003Cstrong>Exemples\u003C/strong> :\u003C/p>\n\u003Cul>\n\u003Cli>Créer un site headless avec une interface totalement sur mesure.\u003C/li>\n\u003Cli>Afficher les produits et collections dynamiquement.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"3-api-graphql-ou-rest\">\u003Cstrong>3. API GraphQL ou REST\u003C/strong>\u003C/h3>\n\u003Cp>Shopify propose les \u003Cstrong>deux\u003C/strong>, mais ils tendent à privilégier les API \u003Cstrong>GraphQL\u003C/strong>.\u003Cbr>\nOn verra les différences dans un prochain post ! 😉\u003C/p>\n\u003Ch2 id=\"en-résumé\">En résumé\u003C/h2>\n\u003Cp>Shopify vous donne accès aux données que vous pouvez \u003Cstrong>lire, modifier et utiliser\u003C/strong> via leur API.\u003C/p>\n\u003Cp>Cela permet aux développeurs d’\u003Cstrong>étendre les fonctionnalités\u003C/strong> d’une boutique Shopify :\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Back-end\u003C/strong> via les \u003Cstrong>Admin API\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Front-end\u003C/strong> via les \u003Cstrong>Storefront API\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Cp>En choisissant les données qu’ils exposent, Shopify garantit la \u003Cstrong>stabilité\u003C/strong> de la solution. Ainsi, les développeurs ne peuvent \u003Cstrong>pas modifier ou supprimer une donnée essentielle\u003C/strong> au bon fonctionnement de la boutique.\u003C/p>",{"headings":150,"imagePaths":173,"frontmatter":174},[151,154,157,160,163,166,169,172],{"depth":36,"slug":152,"text":153},"cest-quoi-une-api","C’est quoi une API ?",{"depth":36,"slug":155,"text":156},"exemple-avec-un-restaurant","Exemple avec un restaurant",{"depth":40,"slug":158,"text":159},"imagine-que-tu-es-dans-un-restaurant","Imagine que tu es dans un restaurant :",{"depth":36,"slug":161,"text":162},"les-différents-types-dapi-shopify","Les différents types d’API Shopify",{"depth":40,"slug":164,"text":165},"1-admin-api","1. Admin API",{"depth":40,"slug":167,"text":168},"2-storefront-api","2. Storefront API",{"depth":40,"slug":170,"text":171},"3-api-graphql-ou-rest","3. API GraphQL ou REST",{"depth":36,"slug":50,"text":51},[],{"publishDate":175,"author":25,"title":134,"excerpt":135,"image":136,"category":18,"tags":176,"metadata":177,"readingTime":36},["Date","2025-02-03T00:00:00.000Z"],[20,138,139,140,141],{"canonical":143}]